- name: Add Google DNS resolver
  blockinfile:
    path: /etc/resolv.conf
    marker: ""
    insertafter: "; generated by /usr/sbin/dhclient-script"
    content: |
      nameserver {{ squidProxy.dns_resolver}}

- name: Install IP tables firewall
  yum:
    name: iptables-services
    state: present

- name: install pip via easy_install
  easy_install:
    name: pip
    state: latest

- name: Ensure boto and boto3 modules are installed
  pip:
    name: ['boto3', 'botocore']

- name: Define squid_install_from_source_dependencies.
  set_fact:
    squid_install_from_source_dependencies: "{{ squidProxy.squid_install_from_source_dependencies | list }}"
  when: squid_install_from_source_dependencies is not defined

- name: Ensure squid proxy's dependencies are installed.
  package:
    name: "{{ squid_install_from_source_dependencies }}"
    state: present

- name: get squid source files
  get_url:
    url: http://www.squid-cache.org/Versions/v3/3.5/squid-{{ squidProxy.squid_version }}.tar.gz
    dest: /tmp

- name: Extract package
  shell: tar xvf squid*.tar.gz
  args:
    chdir: /tmp

- name: configure the source
  shell: ./configure --prefix=/usr --exec-prefix=/usr --libexecdir=/usr/lib64/squid --sysconfdir=/etc/squid --sharedstatedir=/var/lib --localstatedir=/var --libdir=/usr/lib64 --datadir=/usr/share/squid --with-logdir=/var/log/squid --with-pidfile=/var/run/squid.pid --with-default-user=squid --disable-dependency-tracking --enable-linux-netfilter --with-openssl --without-nettle
  args:
    chdir: /tmp/squid-{{ squidProxy.squid_version }}

- name: compile the source
  shell: make
  args:
    chdir: /tmp/squid-{{ squidProxy.squid_version }}

- name: install from source
  shell: make install
  args:
    chdir: /tmp/squid-{{ squidProxy.squid_version }}

- name: Add new squid user if the user doesn't exist
  shell: id -u squid &>/dev/null || adduser -M squid

- name: Change owner of squid log directory
  file:
    path: /var/log/squid
    owner: squid
    group: squid
    recurse: yes
    mode: 0750

- name: Change owner of squid cache directory
  file:
    path: /var/cache/squid
    owner: squid
    group: squid
    recurse: yes
    mode: 0750

- name: Change owner and group of the executable files, appropriate for squid
  file:
    path: /etc/squid/squid.conf
    owner: root
    group: squid
    mode: 0640

- name: Replace squid startup config file from template
  template:
    src: squid.startup.conf.j2
    dest: /etc/init.d/squid

- name: Make file executable
  file:
    path: /etc/init.d/squid
    mode: a+x

- name: Transfer domains exclusion list file from template
  template:
    src: no-proxy.txt.j2
    dest: /etc/squid/no-proxy.txt

- name: Change owner and group of the no-proxy file, appropriate for squid
  file:
    path: /etc/squid/no-proxy.txt
    owner: root
    group: squid

########## Fetch Vault certificate, process it and place it in appropriate directory ##############

- name: Creates ssl dir
  file:
    path: "{{ squidProxy.ssl_certificate_path }}"
    state: directory
    owner: root
    group: squid

- name: install latest pyopenssl via pip
  pip:
    name: pyopenssl
    state: latest

- name: Generate a certificate
  shell: openssl req -new -newkey rsa:2048 -sha256 -days 365 -nodes -x509 -extensions v3_ca -keyout {{ squidProxy.ssl_certificate_path }}certificate.pem  -out {{ squidProxy.ssl_certificate_path }}certificate.pem -subj "/C=GB/ST=London/L=London/O=Global Security/OU=IT Department/CN={{ squidProxy.host }}"

- name: Generate browser certificate for clients
  shell: openssl x509 -in {{ squidProxy.ssl_certificate_path }}certificate.pem -outform DER -out {{ squidProxy.ssl_certificate_path }}root_cert_squid.der

- name: Redirect HTTP port to squid proxy configured port
  shell: iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3128

- name: Redirect HTTPS port to squid proxy configured port
  shell: iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 3129
  
- name: Save IP tables firewall config 
  shell: service iptables save

- name: Replace squid config file from template
  template:
    src: bypass-squid.conf.j2
    dest: /etc/squid/squid.conf

- name: download blackweb project
  shell: wget -q -N https://raw.githubusercontent.com/maravento/blackweb/master/blackweb.tar.gz && cat blackweb.tar.gz* | tar xzf -
  args:
    chdir: /etc/squid/

- name: Change permission for blackweb.txt
  file:
    path: /etc/squid/blackweb.txt
    owner: root
    group: squid

- name: Creates a cron file to update the blacklist under /etc/cron.d
  cron:
    name: autoupdates the proxies blacklist at 10am every Monday
    user: centos
    weekday: 1
    minute: 0
    hour: 11
    job: "cd /etc/squid && wget -q -N https://raw.githubusercontent.com/maravento/blackweb/master/blackweb.tar.gz && cat blackweb.tar.gz* | tar xzf - && sudo systemctl restart squid"
    cron_file: blacklist-autoupdate

- name: Transfer shell script to modify blacklist
  template:
    src: modify-blacklist.j2
    dest: /etc/squid/modify-blacklist.sh

- name: Creates a cron file that modifies blacklist under /etc/cron.d
  cron:
    name: Modify blacklist to remove amazon domains
    user: centos
    weekday: 1
    minute: 0
    hour: 12
    job: "sh /etc/squid/modify-blacklist.sh && sudo squid -k reconfigure"
    cron_file: modify_blacklist

- name: Disable SELinux
  shell: setenforce 0     

- name: restart iptables service
  systemd:
    name: iptables
    state: restarted
    enabled: yes

### Upload Root Certificate to S3 when installing squid for workspaces ####
- name: Upload Squid Root Certificate for browsers to S3 bucket
  become: yes
  aws_s3:
    mode: put
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_region: "{{ aws_region }}"
    bucket: "{{ bucketName }}"
    src: "{{ squidProxy.ssl_certificate_path }}root_cert_squid.der"
    object: /squid/root_cert_squid_workspace.der
  when: inventory_hostname == "squid-workspace.{{ domain }}"

- name: Upload Squid Root Certificate for tools to S3 bucket
  become: yes
  aws_s3:
    mode: put
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    aws_region: "{{ aws_region }}"
    bucket: "{{ bucketName }}"
    src: "{{ squidProxy.ssl_certificate_path }}root_cert_squid.der"
    object: /squid/root_cert_squid_tools.der
  when: inventory_hostname == "squid-tools.{{ domain }}"

- name: start squid service
  systemd:
    name: squid
    state: started
    enabled: yes